

module AbsGramatyka where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
data Program = Prog [TopStm] | ProExp Exp
  deriving (Eq, Ord, Show, Read)

data Type = IntType | StrType | BoolType | VoidType
  deriving (Eq, Ord, Show, Read)

data Ref = IntRef | StrRef | BoolRef
  deriving (Eq, Ord, Show, Read)

data Exp
    = EStr String
    | EIdent Ident
    | ERef Ident
    | EFun Ident [Exp]
    | EInt Integer
    | Neg Exp
    | EMul Exp MulOp Exp
    | EAdd Exp AddOp Exp
    | ETrue
    | EFalse
    | Not Exp
    | ERel Exp RelOp Exp
    | EAnd Exp Exp
    | EOr Exp Exp
  deriving (Eq, Ord, Show, Read)

data AddOp = Plus | Minus
  deriving (Eq, Ord, Show, Read)

data MulOp = Times | Div | Mod
  deriving (Eq, Ord, Show, Read)

data RelOp = LTH | LE | GTH | GE | EQU | NE
  deriving (Eq, Ord, Show, Read)

data TopStm
    = DeclTop Type [Item] | FunDecTop Fun | FunDefTop Fun Block
  deriving (Eq, Ord, Show, Read)

data Stm
    = Decl Type [Item]
    | Ass Ident Exp
    | Cond Exp Block
    | CondElse Exp Block Block
    | While Exp Block
    | StmExp Exp
    | Print [Exp]
    | FunDec Fun
    | FunDef Fun Block
    | RetVal Exp
    | Ret
  deriving (Eq, Ord, Show, Read)

data Item = NoInit Ident | Init Ident Exp
  deriving (Eq, Ord, Show, Read)

data Block = Blk [Stm]
  deriving (Eq, Ord, Show, Read)

data Arg = ArgType Type Ident | ArgRef Ref Ident
  deriving (Eq, Ord, Show, Read)

data Fun = FunPref Type Ident [Arg]
  deriving (Eq, Ord, Show, Read)

