-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParGramatyka where
import AbsGramatyka
import LexGramatyka
import ErrM

}

%name pProgram Program
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '!' { PT _ (TS _ 1) }
  '!=' { PT _ (TS _ 2) }
  '%' { PT _ (TS _ 3) }
  '&' { PT _ (TS _ 4) }
  '&&' { PT _ (TS _ 5) }
  '(' { PT _ (TS _ 6) }
  ')' { PT _ (TS _ 7) }
  '*' { PT _ (TS _ 8) }
  '+' { PT _ (TS _ 9) }
  ',' { PT _ (TS _ 10) }
  '-' { PT _ (TS _ 11) }
  '/' { PT _ (TS _ 12) }
  ';' { PT _ (TS _ 13) }
  '<' { PT _ (TS _ 14) }
  '<=' { PT _ (TS _ 15) }
  '=' { PT _ (TS _ 16) }
  '==' { PT _ (TS _ 17) }
  '>' { PT _ (TS _ 18) }
  '>=' { PT _ (TS _ 19) }
  'bool' { PT _ (TS _ 20) }
  'bool&' { PT _ (TS _ 21) }
  'else' { PT _ (TS _ 22) }
  'false' { PT _ (TS _ 23) }
  'if' { PT _ (TS _ 24) }
  'int' { PT _ (TS _ 25) }
  'int&' { PT _ (TS _ 26) }
  'print' { PT _ (TS _ 27) }
  'return' { PT _ (TS _ 28) }
  'string' { PT _ (TS _ 29) }
  'string&' { PT _ (TS _ 30) }
  'true' { PT _ (TS _ 31) }
  'void' { PT _ (TS _ 32) }
  'while' { PT _ (TS _ 33) }
  '{' { PT _ (TS _ 34) }
  '||' { PT _ (TS _ 35) }
  '}' { PT _ (TS _ 36) }

L_quoted { PT _ (TL $$) }
L_ident  { PT _ (TV $$) }
L_integ  { PT _ (TI $$) }


%%

String  :: { String }  : L_quoted {  $1 }
Ident   :: { Ident }   : L_ident  { Ident $1 }
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }

Program :: { Program }
Program : ListTopStm { AbsGramatyka.Prog (reverse $1) }
        | Exp { AbsGramatyka.ProExp $1 }
Type :: { Type }
Type : 'int' { AbsGramatyka.IntType }
     | 'string' { AbsGramatyka.StrType }
     | 'bool' { AbsGramatyka.BoolType }
     | 'void' { AbsGramatyka.VoidType }
Ref :: { Ref }
Ref : 'int&' { AbsGramatyka.IntRef }
    | 'string&' { AbsGramatyka.StrRef }
    | 'bool&' { AbsGramatyka.BoolRef }
Exp6 :: { Exp }
Exp6 : String { AbsGramatyka.EStr $1 }
     | Ident { AbsGramatyka.EIdent $1 }
     | '&' Ident { AbsGramatyka.ERef $2 }
     | Ident '(' ListExp ')' { AbsGramatyka.EFun $1 $3 }
     | Integer { AbsGramatyka.EInt $1 }
     | 'true' { AbsGramatyka.ETrue }
     | 'false' { AbsGramatyka.EFalse }
     | '(' Exp ')' { $2 }
Exp5 :: { Exp }
Exp5 : '-' Exp6 { AbsGramatyka.Neg $2 }
     | '!' Exp6 { AbsGramatyka.Not $2 }
     | Exp6 { $1 }
Exp4 :: { Exp }
Exp4 : Exp4 MulOp Exp5 { AbsGramatyka.EMul $1 $2 $3 } | Exp5 { $1 }
Exp3 :: { Exp }
Exp3 : Exp3 AddOp Exp4 { AbsGramatyka.EAdd $1 $2 $3 } | Exp4 { $1 }
Exp2 :: { Exp }
Exp2 : Exp2 RelOp Exp3 { AbsGramatyka.ERel $1 $2 $3 } | Exp3 { $1 }
Exp1 :: { Exp }
Exp1 : Exp2 '&&' Exp1 { AbsGramatyka.EAnd $1 $3 } | Exp2 { $1 }
Exp :: { Exp }
Exp : Exp1 '||' Exp { AbsGramatyka.EOr $1 $3 } | Exp1 { $1 }
ListExp :: { [Exp] }
ListExp : {- empty -} { [] }
        | Exp { (:[]) $1 }
        | Exp ',' ListExp { (:) $1 $3 }
AddOp :: { AddOp }
AddOp : '+' { AbsGramatyka.Plus } | '-' { AbsGramatyka.Minus }
MulOp :: { MulOp }
MulOp : '*' { AbsGramatyka.Times }
      | '/' { AbsGramatyka.Div }
      | '%' { AbsGramatyka.Mod }
RelOp :: { RelOp }
RelOp : '<' { AbsGramatyka.LTH }
      | '<=' { AbsGramatyka.LE }
      | '>' { AbsGramatyka.GTH }
      | '>=' { AbsGramatyka.GE }
      | '==' { AbsGramatyka.EQU }
      | '!=' { AbsGramatyka.NE }
TopStm :: { TopStm }
TopStm : Type ListItem ';' { AbsGramatyka.DeclTop $1 $2 }
       | Fun ';' { AbsGramatyka.FunDecTop $1 }
       | Fun Block { AbsGramatyka.FunDefTop $1 $2 }
Stm :: { Stm }
Stm : Type ListItem ';' { AbsGramatyka.Decl $1 $2 }
    | Ident '=' Exp ';' { AbsGramatyka.Ass $1 $3 }
    | 'if' '(' Exp ')' Block { AbsGramatyka.Cond $3 $5 }
    | 'if' '(' Exp ')' Block 'else' Block { AbsGramatyka.CondElse $3 $5 $7 }
    | 'while' '(' Exp ')' Block { AbsGramatyka.While $3 $5 }
    | Exp ';' { AbsGramatyka.StmExp $1 }
    | 'print' '(' ListExp ')' ';' { AbsGramatyka.Print $3 }
    | Fun ';' { AbsGramatyka.FunDec $1 }
    | Fun Block { AbsGramatyka.FunDef $1 $2 }
    | 'return' Exp ';' { AbsGramatyka.RetVal $2 }
    | 'return' ';' { AbsGramatyka.Ret }
Item :: { Item }
Item : Ident { AbsGramatyka.NoInit $1 }
     | Ident '=' Exp { AbsGramatyka.Init $1 $3 }
ListItem :: { [Item] }
ListItem : Item { (:[]) $1 } | Item ',' ListItem { (:) $1 $3 }
ListTopStm :: { [TopStm] }
ListTopStm : {- empty -} { [] }
           | ListTopStm TopStm { flip (:) $1 $2 }
ListStm :: { [Stm] }
ListStm : {- empty -} { [] } | ListStm Stm { flip (:) $1 $2 }
Block :: { Block }
Block : '{' ListStm '}' { AbsGramatyka.Blk (reverse $2) }
Arg :: { Arg }
Arg : Type Ident { AbsGramatyka.ArgType $1 $2 }
    | Ref Ident { AbsGramatyka.ArgRef $1 $2 }
ListArg :: { [Arg] }
ListArg : {- empty -} { [] }
        | Arg { (:[]) $1 }
        | Arg ',' ListArg { (:) $1 $3 }
Fun :: { Fun }
Fun : Type Ident '(' ListArg ')' { AbsGramatyka.FunPref $1 $2 $4 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

