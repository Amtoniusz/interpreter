-- automatically generated by BNF Converter
module Main where


import System.IO ( stdin, stderr, stdout , hGetContents , hPutStrLn)
import System.Environment ( getArgs, getProgName )
import System.Exit ( exitFailure, exitSuccess )

import LexGramatyka
import ParGramatyka
import SkelGramatyka
import PrintGramatyka
import AbsGramatyka
import InterpreterEval
import ErrM



import ErrM

type ParseFun a = [Token] -> Err a

myLLexer = myLexer

type Verbosity = Int

-- runFile :: (Print a, Show a) => Verbosity -> ParseFun a -> FilePath -> IO ()
runFile v p f =  readFile f >>= run v p

-- run :: (Print a, Show a) => Verbosity -> ParseFun a -> String -> IO ()
run v p s = let ts = myLLexer s in case p ts of
           Bad s    -> do hPutStrLn stderr  "\nParse Failed...\n"
                          exitFailure
           Ok  tree -> do let (error, out) = evalProgram tree in do   
                          mapM_ putStrLn (out)
                          hPutStrLn stderr error
                          if error == "" then 
                                              exitSuccess
                                         else 
                                              exitFailure

main :: IO ()
main = do
  args <- getArgs
  case args of
    [] -> hGetContents stdin >>= run 2 pProgram
    fs -> mapM_ (runFile 2 pProgram) fs