module SkelGramatyka where

-- Haskell module generated by the BNF converter

import AbsGramatyka
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  Prog topstms -> failure x
  ProExp exp -> failure x
transType :: Type -> Result
transType x = case x of
  IntType -> failure x
  StrType -> failure x
  BoolType -> failure x
  VoidType -> failure x
transRef :: Ref -> Result
transRef x = case x of
  IntRef -> failure x
  StrRef -> failure x
  BoolRef -> failure x
transExp :: Exp -> Result
transExp x = case x of
  EStr string -> failure x
  EIdent ident -> failure x
  ERef ident -> failure x
  EFun ident exps -> failure x
  EInt integer -> failure x
  Neg exp -> failure x
  EMul exp1 mulop exp2 -> failure x
  EAdd exp1 addop exp2 -> failure x
  ETrue -> failure x
  EFalse -> failure x
  Not exp -> failure x
  ERel exp1 relop exp2 -> failure x
  EAnd exp1 exp2 -> failure x
  EOr exp1 exp2 -> failure x
transAddOp :: AddOp -> Result
transAddOp x = case x of
  Plus -> failure x
  Minus -> failure x
transMulOp :: MulOp -> Result
transMulOp x = case x of
  Times -> failure x
  Div -> failure x
  Mod -> failure x
transRelOp :: RelOp -> Result
transRelOp x = case x of
  LTH -> failure x
  LE -> failure x
  GTH -> failure x
  GE -> failure x
  EQU -> failure x
  NE -> failure x
transTopStm :: TopStm -> Result
transTopStm x = case x of
  DeclTop type_ items -> failure x
  FunDecTop fun -> failure x
  FunDefTop fun block -> failure x
transStm :: Stm -> Result
transStm x = case x of
  Decl type_ items -> failure x
  Ass ident exp -> failure x
  Cond exp block -> failure x
  CondElse exp block1 block2 -> failure x
  While exp block -> failure x
  StmExp exp -> failure x
  Print exps -> failure x
  FunDec fun -> failure x
  FunDef fun block -> failure x
  RetVal exp -> failure x
  Ret -> failure x
transItem :: Item -> Result
transItem x = case x of
  NoInit ident -> failure x
  Init ident exp -> failure x
transBlock :: Block -> Result
transBlock x = case x of
  Blk stms -> failure x
transArg :: Arg -> Result
transArg x = case x of
  ArgType type_ ident -> failure x
  ArgRef ref ident -> failure x
transFun :: Fun -> Result
transFun x = case x of
  FunPref type_ ident args -> failure x

